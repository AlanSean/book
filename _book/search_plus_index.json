{"./":{"url":"./","title":"gitbook日常错误","keywords":"","body":"简览 警告总览 修改md内容时服务报错并中断 gitbook官网打不开 修改md内容时服务报错并中断 解决方案: 先启动 gitbook serve服务，然后删除本地 \"book\"文件夹（或者你指定的源码生成目录） 具体为啥这样会好，我也不清楚。不过这样好用就是了 警告总览 warn: \"options\" property is deprecated, use config.get(key) instead 机翻： 警告:不推荐使用“options”属性，而是使用config.get(key) 原因: 猜测为某个插件版本过老，毕竟gitbook更新还是蛮快的 gitbook官网打不开 把ssr代理模式修改为全局代理即可。 powered by Gitbook该文件修订时间： 2018-12-28 16:45:29 "},"clutter/gather.html":{"url":"clutter/gather.html","title":"1.gather","keywords":"","body":"gather 目的 **搜集一些不错的特效，过渡动画，用来学习以及使用。** **来源均为网站扒取，会附上来源网站。** **尽量做到只取精华。** Power -------- canvas粉末效果 预览地址 来源渠道: 剑灵游戏活动看到，进行扒取的。我是来源地址 billboard-------- 宣传logo效果 预览地址 来源渠道: 搜索动画效果 无意间看到的 。并做了一些改动。 我是来源地址 我是源码地址 powered by Gitbook该文件修订时间： 2018-10-18 15:14:00 "},"clutter/serviceWorker配置~要素 以及注意点.html":{"url":"clutter/serviceWorker配置~要素 以及注意点.html","title":"3.serviceWorker配置~要素 以及注意点","keywords":"","body":"serviceWorker配置~要素 以及注意点 更新机制 注册的文件产生变动,触发install cache.addAll完成后不会主动触发skipWaiting skipWaiting触发方式 1.打开控制台手点 2.self.skipWaiting(); 缓存名称维护与替换,以及为什么这么做 代码更新 缓存名称也必须跟着变更 否则不会更新缓存 如果你只修改了缓存名称但是不进行删除，那么它会一辈子只用老的缓存 fetch 永远都比 install activate要先触发 在提交了迭代之后，最少要刷新两次才可能是最新版本（目前是刷第二次就是最新版本） 第一次刷新 是安装新的缓存 当前页面读取老的缓存，切换路由，新的页面 都为新的缓存。 第二次刷新 新的 新的 都是新的。 powered by Gitbook该文件修订时间： 2018-12-27 15:58:58 "},"javascript记录/浅拷贝与深拷贝.html":{"url":"javascript记录/浅拷贝与深拷贝.html","title":"1.浅拷贝与深拷贝","keywords":"","body":"浅拷贝与深拷贝 powered by Gitbook该文件修订时间： 2018-12-28 15:28:23 "},"linux/node安装.html":{"url":"linux/node安装.html","title":"1.node安装","keywords":"","body":"node安装 ``` wget https://npm.taobao.org/mirrors/node/v8.9.3/node-v8.9.3-linux-x64.tar.xz yum search xz 检查是否有xz命令 yum install xz xz -d node-v8.9.3-linux-x64.tar.xz tar -xf node-v8.9.3-linux-x64.tar ln -s 安装的位置/node/bin/npm /usr/local/bin/npm ln -s 安装的位置/node/bin/node /usr/local/bin/node ``` powered by Gitbook该文件修订时间： 2019-01-02 14:05:37 "},"linux/http2升级.html":{"url":"linux/http2升级.html","title":"2.http2升级","keywords":"","body":"http2升级 学习地址 下载最新版的OpenSSL 库 wget https://www.openssl.org/source/openssl-1.1.0f.tar.gz tar xzf openssl-1.1.0f.tar.gz cd openssl-1.1.0f ./config --prefix=/usr/local/openssl make && make install 替换openssl版本库 mv /usr/bin/openssl /usr/bin/openssl.old \\ mv /usr/include/openssl /usr/include/openssl.old \\ ln -s /usr/local/openssl/bin/openssl /usr/bin/openssl \\ ln -s /usr/local/openssl/include/openssl /usr/include/openssl \\ #链接新库文件 ln -s /usr/local/openssl/lib/libssl.so /usr/local/lib64/libssl.so \\ ln -s /usr/local/openssl/lib/libcrypto.so /usr/local/lib64/libcrypto.so \\ #检查更新后的openssl依赖库是否是1.1.0f strings /usr/local/lib64/libssl.so | grep OpenSSL #显示结果表明已升级到最新版本链接库 OpenSSL 1.1.0f 25 May 2017 #配置openssl库文件的搜索路径 echo '/usr/local/openssl/lib' >> /etc/ld.so.conf #使修改后的搜索路径生效 ldconfig -v #查看openssl版本，结果显示升级成功 openssl version OpenSSL 1.1.0f 25 May 2017 linux把nginx添加到全局环境变量 ln -s /usr/local/nginx/sbin/nginx /usr/local/bin/ /usr/local/bin/就是环境变量目录 nginx 编译 wget http://nginx.org/download/nginx1.13.7.tar.gz tar zxvf nginx1.13.7.tar.gz cd nginx1.13.7 ./configure --prefix=/usr/local/nginx \\ --conf-path=/usr/local/nginx/conf/nginx.conf \\ --sbin-path=/usr/local/nginx/sbin/nginx \\ #注意改成自己的pid文件位置 --pid-path=/usr/local/nginx/logs/nginx.pid \\ #注意改成自己的log文件位置 --error-log-path=/usr/local/nginx/logs/error.log \\ --http-log-path=/usr/local/nginx/logs/access.log \\ --user=nginx \\ --group=nginx \\ --with-http_ssl_module \\ --with-http_realip_module \\ --with-http_flv_module \\ --with-http_mp4_module \\ --with-http_gunzip_module \\ --with-http_gzip_static_module \\ --with-http_secure_link_module \\ --with-http_v2_module \\ --with-http_stub_status_module \\ --with-http_sub_module \\ #注意改成自己的openssl位置 --with-openssl=/usr/local/openssl-1.1.0f make mv /usr/local/nginx/sbin/nginx /usr/local/nginx/sbin/nginx.old cp objs/nginx /usr/local/nginx/sbin/nginx make upgrade nginx -V conf 文件 listen 443 ssl http2; powered by Gitbook该文件修订时间： 2018-12-28 15:38:54 "}}